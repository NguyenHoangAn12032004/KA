import axios from 'axios';
import { API_BASE_URL } from '../config';

// Types
export interface ChatMessage {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: Date;
  isTyping?: boolean;
}

export interface ChatResponse {
  success: boolean;
  data: {
    message: string;
    responseTime: number;
    needsHumanAgent: boolean;
  };
}

class ChatbotService {
  private baseURL = `${API_BASE_URL}/api/ai`;

  async sendMessage(message: string): Promise<ChatResponse> {
    try {
      console.log('ü§ñ Sending message to chatbot:', message);
      
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng chatbot');
      }

      console.log('üîë Using token:', token.substring(0, 20) + '...');

      const response = await axios.post(
        `${this.baseURL}/chat`,
        { message },
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          timeout: 30000, // 30 seconds timeout
        }
      );

      console.log('‚úÖ Chatbot response:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Chatbot API Error:', error);
      console.error('‚ùå Error response:', error.response?.data);
      console.error('‚ùå Error status:', error.response?.status);
      
      if (error.response?.status === 401) {
        throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      }
      
      if (error.response?.status === 429) {
        throw new Error('B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }

      if (error.code === 'ECONNABORTED') {
        throw new Error('Y√™u c·∫ßu qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.');
      }
      
      throw new Error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn');
    }
  }

  // Predefined quick messages for better UX
  getQuickMessages(): string[] {
    return [
      'T√¥i c·∫ßn t√¨m vi·ªác l√†m ph√π h·ª£p',
      'L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o CV t·ªët?',
      'C√°c k·ªπ nƒÉng c·∫ßn thi·∫øt cho developer l√† g√¨?',
      'T√¥i mu·ªën bi·∫øt v·ªÅ l∆∞∆°ng c·ªßa v·ªã tr√≠ n√†y',
      'L√†m sao ƒë·ªÉ chu·∫©n b·ªã ph·ªèng v·∫•n?',
      'T√¥i c·∫ßn t∆∞ v·∫•n ngh·ªÅ nghi·ªáp'
    ];
  }
}

export const chatbotService = new ChatbotService();
