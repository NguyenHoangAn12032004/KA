import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Button,
  Grid,
  Alert,
  AlertTitle,
  Paper,
  List,
  ListItem,
  ListItemText,
  Divider,
  Container,
  Stack
} from '@mui/material';
import { trackJobView, trackJobApplication, trackInterview, analyticsService } from '../services/analytics';

interface AnalyticsStats {
  job_view: number;
  application_submit: number;
  interview: number;
}

const AnalyticsDemo: React.FC = () => {
  const [stats, setStats] = useState<AnalyticsStats>({
    job_view: 0,
    application_submit: 0,
    interview: 0
  });
  const [dashboardStats, setDashboardStats] = useState<any>(null);
  const [message, setMessage] = useState<string>('');
  const [loading, setLoading] = useState(false);

  const fetchAnalytics = async () => {
    try {
      const [personalData, dashboardData] = await Promise.all([
        analyticsService.getPersonalAnalytics('student-1'),
        analyticsService.getDashboardStats()
      ]);

      if (personalData.success) {
        setStats(personalData.data);
      }
      
      if (dashboardData.success) {
        setDashboardStats(dashboardData.data);
      }
    } catch (error) {
      console.error('Error fetching analytics:', error);
    }
  };

  useEffect(() => {
    fetchAnalytics();
  }, []);

  const handleTrackEvent = async (eventType: string) => {
    setLoading(true);
    setMessage('');

    try {
      let success = false;
      
      switch (eventType) {
        case 'job_view':
          success = await trackJobView('student-1', 'demo-job-' + Date.now(), 'demo-company-1');
          setMessage('ƒê√£ theo d√µi l∆∞·ª£t xem c√¥ng vi·ªác!');
          break;
        case 'application_submit':
          success = await trackJobApplication('student-1', 'demo-job-' + Date.now(), 'demo-company-1');
          setMessage('ƒê√£ theo d√µi ƒë∆°n ·ª©ng tuy·ªÉn!');
          break;
        case 'interview':
          success = await trackInterview('student-1', 'demo-job-' + Date.now(), 'demo-company-1');
          setMessage('ƒê√£ theo d√µi cu·ªôc ph·ªèng v·∫•n!');
          break;
      }

      if (success) {
        // Refresh analytics after tracking
        setTimeout(() => {
          fetchAnalytics();
        }, 500);
      }
    } catch (error) {
      setMessage('L·ªói khi theo d√µi s·ª± ki·ªán: ' + error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Typography variant="h3" component="h1" gutterBottom align="center" color="primary">
        üéØ Demo H·ªá th·ªëng Analytics
      </Typography>
      
      <Typography variant="h6" align="center" color="text.secondary" paragraph>
        Trang n√†y cho ph√©p b·∫°n test h·ªá th·ªëng analytics trong th·ªùi gian th·ª±c
      </Typography>

      <Grid container spacing={4}>
        {/* Controls */}
        <Grid item xs={12} md={6}>
          <Card elevation={3}>
            <CardContent>
              <Typography variant="h5" gutterBottom color="primary">
                üìä Theo d√µi S·ª± ki·ªán
              </Typography>
              
              <Stack spacing={2}>
                <Button
                  variant="contained"
                  color="primary"
                  size="large"
                  onClick={() => handleTrackEvent('job_view')}
                  disabled={loading}
                  fullWidth
                >
                  üëÅÔ∏è Xem c√¥ng vi·ªác (+1 l∆∞·ª£t xem)
                </Button>
                
                <Button
                  variant="contained"
                  color="success"
                  size="large"
                  onClick={() => handleTrackEvent('application_submit')}
                  disabled={loading}
                  fullWidth
                >
                  üìù ·ª®ng tuy·ªÉn c√¥ng vi·ªác (+1 ƒë∆°n ·ª©ng tuy·ªÉn)
                </Button>
                
                <Button
                  variant="contained"
                  color="warning"
                  size="large"
                  onClick={() => handleTrackEvent('interview')}
                  disabled={loading}
                  fullWidth
                >
                  üé§ Tham gia ph·ªèng v·∫•n (+1 ph·ªèng v·∫•n)
                </Button>
                
                <Button
                  variant="outlined"
                  onClick={fetchAnalytics}
                  disabled={loading}
                  fullWidth
                >
                  üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu
                </Button>
              </Stack>

              {message && (
                <Alert severity="success" sx={{ mt: 2 }}>
                  {message}
                </Alert>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Personal Stats */}
        <Grid item xs={12} md={6}>
          <Card elevation={3}>
            <CardContent>
              <Typography variant="h5" gutterBottom color="primary">
                üìà Th·ªëng k√™ c√° nh√¢n (30 ng√†y)
              </Typography>
              
              <List>
                <ListItem>
                  <ListItemText
                    primary="L∆∞·ª£t xem trong 30 ng√†y"
                    secondary={
                      <Typography variant="h4" color="primary">
                        {stats.job_view}
                      </Typography>
                    }
                  />
                </ListItem>
                <Divider />
                
                <ListItem>
                  <ListItemText
                    primary="ƒê∆°n ·ª©ng tuy·ªÉn trong 30 ng√†y"
                    secondary={
                      <Typography variant="h4" color="success.main">
                        {stats.application_submit}
                      </Typography>
                    }
                  />
                </ListItem>
                <Divider />
                
                <ListItem>
                  <ListItemText
                    primary="T·ªïng s·ªë l∆∞·ª£t ph·ªèng v·∫•n trong 30 ng√†y"
                    secondary={
                      <Typography variant="h4" color="warning.main">
                        {stats.interview}
                      </Typography>
                    }
                  />
                </ListItem>
              </List>
            </CardContent>
          </Card>
        </Grid>

        {/* Dashboard Stats */}
        <Grid item xs={12}>
          <Card elevation={3}>
            <CardContent>
              <Typography variant="h5" gutterBottom color="primary">
                üè¢ Th·ªëng k√™ t·ªïng quan h·ªá th·ªëng
              </Typography>
              
              {dashboardStats && (
                <Grid container spacing={3}>
                  <Grid item xs={6} sm={3}>
                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                      <Typography variant="h4" color="primary">
                        {dashboardStats.totalUsers}
                      </Typography>
                      <Typography variant="body2">T·ªïng s·ªë ng∆∞·ªùi d√πng</Typography>
                    </Paper>
                  </Grid>
                  
                  <Grid item xs={6} sm={3}>
                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                      <Typography variant="h4" color="success.main">
                        {dashboardStats.totalJobs}
                      </Typography>
                      <Typography variant="body2">T·ªïng s·ªë c√¥ng vi·ªác</Typography>
                    </Paper>
                  </Grid>
                  
                  <Grid item xs={6} sm={3}>
                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                      <Typography variant="h4" color="warning.main">
                        {dashboardStats.totalApplications}
                      </Typography>
                      <Typography variant="body2">T·ªïng s·ªë ƒë∆°n ·ª©ng tuy·ªÉn</Typography>
                    </Paper>
                  </Grid>
                  
                  <Grid item xs={6} sm={3}>
                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                      <Typography variant="h4" color="info.main">
                        {dashboardStats.totalCompanies}
                      </Typography>
                      <Typography variant="body2">T·ªïng s·ªë c√¥ng ty</Typography>
                    </Paper>
                  </Grid>
                  
                  <Grid item xs={4}>
                    <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'primary.light', color: 'primary.contrastText' }}>
                      <Typography variant="h4">
                        {dashboardStats.jobViews30d || 0}
                      </Typography>
                      <Typography variant="body2">L∆∞·ª£t xem trong 30 ng√†y</Typography>
                    </Paper>
                  </Grid>
                  
                  <Grid item xs={4}>
                    <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'success.light', color: 'success.contrastText' }}>
                      <Typography variant="h4">
                        {dashboardStats.applications30d || 0}
                      </Typography>
                      <Typography variant="body2">ƒê∆°n ·ª©ng tuy·ªÉn trong 30 ng√†y</Typography>
                    </Paper>
                  </Grid>
                  
                  <Grid item xs={4}>
                    <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'warning.light', color: 'warning.contrastText' }}>
                      <Typography variant="h4">
                        {dashboardStats.interviews30d || 0}
                      </Typography>
                      <Typography variant="body2">Ph·ªèng v·∫•n trong 30 ng√†y</Typography>
                    </Paper>
                  </Grid>
                </Grid>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Alert severity="info" sx={{ mt: 4 }}>
        <AlertTitle>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</AlertTitle>
        <Typography>
          1. Nh·∫•n c√°c n√∫t ƒë·ªÉ t·∫°o s·ª± ki·ªán analytics<br/>
          2. Xem th·ªëng k√™ c·∫≠p nh·∫≠t trong th·ªùi gian th·ª±c<br/>
          3. Ki·ªÉm tra trang Analytics ch√≠nh t·∫°i <strong>/analytics</strong> ƒë·ªÉ xem giao di·ªán ƒë·∫ßy ƒë·ªß<br/>
          4. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông theo d√µi c√°c h√†nh ƒë·ªông c·ªßa sinh vi√™n nh∆∞ xem c√¥ng vi·ªác, ·ª©ng tuy·ªÉn, v√† ph·ªèng v·∫•n
        </Typography>
      </Alert>
    </Container>
  );
};

export default AnalyticsDemo;
