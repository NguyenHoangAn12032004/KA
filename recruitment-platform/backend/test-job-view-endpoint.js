const axios = require('axios');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * Script ƒë·ªÉ ki·ªÉm tra API endpoint ƒë·ªÉ ghi l·∫°i l∆∞·ª£t xem c√¥ng vi·ªác
 */
async function testJobViewEndpoint() {
  try {
    console.log('üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra API endpoint ghi l∆∞·ª£t xem c√¥ng vi·ªác...');

    // L·∫•y m·ªôt c√¥ng vi·ªác ng·∫´u nhi√™n ƒë·ªÉ ki·ªÉm tra
    const job = await prisma.job.findFirst({
      where: {
        isActive: true
      },
      select: {
        id: true,
        title: true,
        viewCount: true
      }
    });

    if (!job) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác n√†o ƒë·ªÉ ki·ªÉm tra');
      return;
    }

    console.log(`üìã C√¥ng vi·ªác ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ki·ªÉm tra: "${job.title}"`);
    console.log(`   - ID: ${job.id}`);
    console.log(`   - L∆∞·ª£t xem hi·ªán t·∫°i: ${job.viewCount}`);

    // G·ªçi API endpoint ƒë·ªÉ ghi l∆∞·ª£t xem
    console.log('\nüîÑ G·ªçi API endpoint ƒë·ªÉ ghi l∆∞·ª£t xem...');
    const response = await axios.post(`http://localhost:5000/api/jobs/${job.id}/view`);

    console.log('\n‚úÖ K·∫øt qu·∫£ t·ª´ API:');
    console.log(`   - Status: ${response.status}`);
    console.log(`   - Data:`, response.data);

    // Ki·ªÉm tra xem s·ªë l∆∞·ª£t xem c√≥ tƒÉng l√™n kh√¥ng
    const updatedJob = await prisma.job.findUnique({
      where: {
        id: job.id
      },
      select: {
        viewCount: true
      }
    });

    console.log(`\nüìä K·∫øt qu·∫£ ki·ªÉm tra:`);
    console.log(`   - L∆∞·ª£t xem tr∆∞·ªõc ƒë√≥: ${job.viewCount}`);
    console.log(`   - L∆∞·ª£t xem hi·ªán t·∫°i: ${updatedJob.viewCount}`);

    if (updatedJob.viewCount > job.viewCount) {
      console.log(`\n‚úÖ API endpoint ho·∫°t ƒë·ªông ƒë√∫ng! S·ªë l∆∞·ª£t xem ƒë√£ tƒÉng.`);
    } else {
      console.log(`\n‚ùå API endpoint kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng! S·ªë l∆∞·ª£t xem kh√¥ng tƒÉng.`);
    }

    // Ki·ªÉm tra b·∫£ng job_views
    const viewRecords = await prisma.jobView.findMany({
      where: {
        jobId: job.id
      },
      orderBy: {
        viewedAt: 'desc'
      },
      take: 5
    });

    console.log(`\nüìã 5 l∆∞·ª£t xem g·∫ßn ƒë√¢y nh·∫•t c·ªßa c√¥ng vi·ªác:`, 
      viewRecords.map(record => ({
        id: record.id,
        userId: record.userId || 'anonymous',
        viewedAt: record.viewedAt
      }))
    );

    console.log('\nüéâ Ho√†n th√†nh ki·ªÉm tra API endpoint ghi l∆∞·ª£t xem c√¥ng vi·ªác!');
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra API endpoint ghi l∆∞·ª£t xem:', error);
    if (error.response) {
      console.error('   - Status:', error.response.status);
      console.error('   - Data:', error.response.data);
    }
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y h√†m ki·ªÉm tra
testJobViewEndpoint(); 