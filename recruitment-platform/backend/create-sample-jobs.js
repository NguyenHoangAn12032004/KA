const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createSampleJobs() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o c√¥ng vi·ªác m·∫´u...');
    
    // L·∫•y th√¥ng tin c√¥ng ty HUTECH
    const company = await prisma.company_profiles.findFirst({
      where: { companyName: 'HUTECH' }
    });
    
    if (!company) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng ty HUTECH');
      return;
    }
    
    console.log(`üìã Th√¥ng tin c√¥ng ty:`);
    console.log(`- ID: ${company.id}`);
    console.log(`- T√™n: ${company.companyName}`);
    
    // Danh s√°ch c√¥ng vi·ªác m·∫´u
    const sampleJobs = [
      {
        title: 'Frontend Developer (React)',
        description: 'Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm m·ªôt Frontend Developer c√≥ kinh nghi·ªám v·ªõi React ƒë·ªÉ tham gia v√†o ƒë·ªôi ng≈© ph√°t tri·ªÉn s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i.',
        requirements: ['C√≥ √≠t nh·∫•t 2 nƒÉm kinh nghi·ªám v·ªõi React', 'Th√†nh th·∫°o JavaScript/TypeScript', 'Hi·ªÉu bi·∫øt v·ªÅ HTML/CSS'],
        benefits: ['L∆∞∆°ng c·∫°nh tranh', 'M√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông', 'C∆° h·ªôi h·ªçc h·ªèi v√† ph√°t tri·ªÉn'],
        location: 'TP. H·ªì Ch√≠ Minh',
        jobType: 'FULL_TIME',
        workMode: 'HYBRID',
        experienceLevel: 'INTERMEDIATE',
        salaryMin: 20000000,
        salaryMax: 35000000,
        currency: 'VND',
        requiredSkills: ['React', 'JavaScript', 'TypeScript', 'HTML', 'CSS'],
        isActive: true,
        publishedAt: new Date(),
        companyId: company.id
      },
      {
        title: 'UI/UX Designer',
        description: 'Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm m·ªôt UI/UX Designer t√†i nƒÉng ƒë·ªÉ thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng cho c√°c s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i.',
        requirements: ['C√≥ √≠t nh·∫•t 2 nƒÉm kinh nghi·ªám thi·∫øt k·∫ø UI/UX', 'Th√†nh th·∫°o Figma, Adobe XD', 'Portfolio thi·∫øt k·∫ø ·∫•n t∆∞·ª£ng'],
        benefits: ['L∆∞∆°ng c·∫°nh tranh', 'M√¥i tr∆∞·ªùng l√†m vi·ªác s√°ng t·∫°o', 'C∆° h·ªôi l√†m vi·ªác v·ªõi c√°c d·ª± √°n l·ªõn'],
        location: 'TP. H·ªì Ch√≠ Minh',
        jobType: 'FULL_TIME',
        workMode: 'ONSITE',
        experienceLevel: 'INTERMEDIATE',
        salaryMin: 18000000,
        salaryMax: 30000000,
        currency: 'VND',
        requiredSkills: ['Figma', 'Adobe XD', 'UI Design', 'UX Research'],
        isActive: true,
        publishedAt: new Date(),
        companyId: company.id
      },
      {
        title: 'Mobile Developer (Flutter)',
        description: 'Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm m·ªôt Mobile Developer c√≥ kinh nghi·ªám v·ªõi Flutter ƒë·ªÉ ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông ƒëa n·ªÅn t·∫£ng.',
        requirements: ['C√≥ √≠t nh·∫•t 1 nƒÉm kinh nghi·ªám v·ªõi Flutter', 'Th√†nh th·∫°o Dart', 'ƒê√£ t·ª´ng ph√°t h√†nh ·ª©ng d·ª•ng tr√™n App Store/Google Play'],
        benefits: ['L∆∞∆°ng c·∫°nh tranh', 'M√¥i tr∆∞·ªùng l√†m vi·ªác linh ho·∫°t', 'C∆° h·ªôi ph√°t tri·ªÉn s·ª± nghi·ªáp'],
        location: 'TP. H·ªì Ch√≠ Minh',
        jobType: 'FULL_TIME',
        workMode: 'HYBRID',
        experienceLevel: 'JUNIOR',
        salaryMin: 15000000,
        salaryMax: 25000000,
        currency: 'VND',
        requiredSkills: ['Flutter', 'Dart', 'Mobile Development', 'Firebase'],
        isActive: true,
        publishedAt: new Date(),
        companyId: company.id
      }
    ];
    
    // T·∫°o c√¥ng vi·ªác
    console.log('üîÑ ƒêang t·∫°o c√¥ng vi·ªác m·∫´u...');
    
    for (const jobData of sampleJobs) {
      const job = await prisma.job.create({
        data: jobData
      });
      
      console.log(`‚úÖ ƒê√£ t·∫°o c√¥ng vi·ªác: ${job.title} (ID: ${job.id})`);
    }
    
    console.log('üéâ T·∫°o c√¥ng vi·ªác m·∫´u ho√†n t·∫•t!');
    
    // Ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng c√¥ng vi·ªác
    const jobCount = await prisma.job.count({
      where: { companyId: company.id }
    });
    
    console.log(`üìä T·ªïng s·ªë c√¥ng vi·ªác c·ªßa c√¥ng ty ${company.companyName}: ${jobCount}`);
    
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o c√¥ng vi·ªác m·∫´u:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createSampleJobs(); 