const jwt = require('jsonwebtoken');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const JWT_SECRET = 'your-secret-key'; // Thay th·∫ø b·∫±ng secret key th·ª±c t·∫ø c·ªßa b·∫°n

async function generateCompanyToken() {
  try {
    // T√¨m m·ªôt t√†i kho·∫£n c√¥ng ty
    const companyUser = await prisma.user.findFirst({
      where: { 
        role: 'COMPANY' 
      },
      include: {
        company_profiles: true
      }
    });

    if (!companyUser) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c√¥ng ty n√†o trong c∆° s·ªü d·ªØ li·ªáu');
      return;
    }
    
    // T·∫°o token cho t√†i kho·∫£n c√¥ng ty
    const token = jwt.sign(
      { 
        id: companyUser.id,
        email: companyUser.email,
        role: companyUser.role
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    console.log('üîë JWT Token cho t√†i kho·∫£n c√¥ng ty:');
    console.log(token);
    
    console.log('\nüìã Th√¥ng tin c√¥ng ty:');
    console.log('ID:', companyUser.id);
    console.log('Email:', companyUser.email);
    console.log('T√™n c√¥ng ty:', companyUser.company_profiles?.companyName || 'N/A');
    console.log('Ng√†nh ngh·ªÅ:', companyUser.company_profiles?.industry || 'N/A');
    console.log('Quy m√¥:', companyUser.company_profiles?.companySize || 'N/A');
    
    console.log('\nüß™ S·ª≠ d·ª•ng l·ªánh sau ƒë·ªÉ ƒëƒÉng nh·∫≠p:');
    console.log(`localStorage.setItem("token", "${token}");`);
    
  } catch (error) {
    console.error('L·ªói khi t·∫°o token:', error);
  } finally {
    await prisma.$disconnect();
  }
}

generateCompanyToken(); 