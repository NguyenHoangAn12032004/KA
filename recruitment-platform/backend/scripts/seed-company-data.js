const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function seedCompanyData() {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho c√¥ng ty...');

    // 1. T√¨m ho·∫∑c t·∫°o c√¥ng ty
    let companyUser = await prisma.user.findFirst({
      where: { role: 'COMPANY' },
      include: { company_profiles: true }
    });

    if (!companyUser) {
      console.log('üëâ Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c√¥ng ty, ƒëang t·∫°o m·ªõi...');
      companyUser = await prisma.user.create({
        data: {
          email: 'company@demo.com',
          password: '$2b$10$dMrTWrx.nP5MkOUxu/IoB.4Y5RenDlX9EJzMH1zMdgOzKlmTFg7Tq', // password: password123
          role: 'COMPANY',
          isActive: true,
          isVerified: true,
          company_profiles: {
            create: {
              companyName: 'FPT Software',
              industry: 'C√¥ng ngh·ªá th√¥ng tin',
              companySize: '1000-5000',
              description: 'FPT Software l√† c√¥ng ty ph·∫ßn m·ªÅm h√†ng ƒë·∫ßu Vi·ªát Nam v·ªõi h∆°n 20 nƒÉm kinh nghi·ªám cung c·∫•p d·ªãch v·ª• cho c√°c kh√°ch h√†ng to√†n c·∫ßu.',
              website: 'https://fptsoftware.com',
              logo: 'https://upload.wikimedia.org/wikipedia/commons/1/11/FPT_logo_2010.svg',
              phone: '0123456789',
              address: 'T√≤a nh√† FPT, Duy T√¢n',
              city: 'H√† N·ªôi',
              country: 'Vi·ªát Nam',
              updatedAt: new Date()
            }
          }
        },
        include: { company_profiles: true }
      });
      console.log('‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n c√¥ng ty:', companyUser.email);
    } else {
      console.log('‚úÖ ƒê√£ t√¨m th·∫•y t√†i kho·∫£n c√¥ng ty:', companyUser.email);
    }

    const companyId = companyUser.company_profiles.id;
    console.log('üè¢ ID c√¥ng ty:', companyId);

    // 2. T·∫°o c√°c vi·ªác l√†m cho c√¥ng ty
    const jobsData = [
      {
        title: 'Frontend Developer (ReactJS)',
        description: 'Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm Frontend Developer c√≥ kinh nghi·ªám v·ªõi ReactJS ƒë·ªÉ tham gia v√†o d·ª± √°n ph√°t tri·ªÉn ·ª©ng d·ª•ng web cho kh√°ch h√†ng l·ªõn.',
        requirements: ['C√≥ √≠t nh·∫•t 2 nƒÉm kinh nghi·ªám v·ªõi ReactJS', 'Th√†nh th·∫°o HTML, CSS, JavaScript', 'C√≥ kinh nghi·ªám v·ªõi Redux, TypeScript'],
        benefits: ['L∆∞∆°ng c·∫°nh tranh', 'Ch·∫ø ƒë·ªô b·∫£o hi·ªÉm t·ªët', 'M√¥i tr∆∞·ªùng l√†m vi·ªác qu·ªëc t·∫ø'],
        responsibilities: ['Ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng', 'T·ªëi ∆∞u hi·ªáu su·∫•t ·ª©ng d·ª•ng', 'L√†m vi·ªác v·ªõi backend developers'],
        jobType: 'FULL_TIME',
        workMode: 'HYBRID',
        experienceLevel: 'INTERMEDIATE',
        location: 'H√† N·ªôi',
        salaryMin: 20000000,
        salaryMax: 35000000,
        currency: 'VND',
        isActive: true,
        viewCount: Math.floor(Math.random() * 500) + 100,
        publishedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 ng√†y tr∆∞·ªõc
      },
      {
        title: 'Backend Developer (NodeJS)',
        description: 'T√¨m ki·∫øm Backend Developer c√≥ kinh nghi·ªám v·ªõi NodeJS v√† ExpressJS ƒë·ªÉ ph√°t tri·ªÉn API v√† microservices.',
        requirements: ['C√≥ √≠t nh·∫•t 2 nƒÉm kinh nghi·ªám v·ªõi NodeJS', 'Hi·ªÉu bi·∫øt v·ªÅ c∆° s·ªü d·ªØ li·ªáu SQL v√† NoSQL', 'Kinh nghi·ªám v·ªõi Docker, Kubernetes l√† l·ª£i th·∫ø'],
        benefits: ['L∆∞∆°ng c·∫°nh tranh', 'Ch·∫ø ƒë·ªô b·∫£o hi·ªÉm t·ªët', 'C∆° h·ªôi ƒë√†o t·∫°o v√† ph√°t tri·ªÉn'],
        responsibilities: ['Ph√°t tri·ªÉn v√† duy tr√¨ API', 'T·ªëi ∆∞u hi·ªáu su·∫•t h·ªá th·ªëng', 'L√†m vi·ªác v·ªõi frontend developers'],
        jobType: 'FULL_TIME',
        workMode: 'ONSITE',
        experienceLevel: 'INTERMEDIATE',
        location: 'H·ªì Ch√≠ Minh',
        salaryMin: 25000000,
        salaryMax: 40000000,
        currency: 'VND',
        isActive: true,
        viewCount: Math.floor(Math.random() * 500) + 100,
        publishedAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) // 14 ng√†y tr∆∞·ªõc
      },
      {
        title: 'UI/UX Designer',
        description: 'T√¨m ki·∫øm UI/UX Designer c√≥ kinh nghi·ªám thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng cho c√°c ·ª©ng d·ª•ng web v√† mobile.',
        requirements: ['C√≥ √≠t nh·∫•t 2 nƒÉm kinh nghi·ªám thi·∫øt k·∫ø UI/UX', 'Th√†nh th·∫°o Figma, Adobe XD', 'Portfolio thi·∫øt k·∫ø ·∫•n t∆∞·ª£ng'],
        benefits: ['M√¥i tr∆∞·ªùng l√†m vi·ªác s√°ng t·∫°o', 'C∆° h·ªôi l√†m vi·ªác v·ªõi kh√°ch h√†ng qu·ªëc t·∫ø', 'L∆∞∆°ng th∆∞·ªüng h·∫•p d·∫´n'],
        responsibilities: ['Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng', 'T·∫°o prototype v√† wireframe', 'L√†m vi·ªác v·ªõi developers ƒë·ªÉ tri·ªÉn khai thi·∫øt k·∫ø'],
        jobType: 'FULL_TIME',
        workMode: 'HYBRID',
        experienceLevel: 'INTERMEDIATE',
        location: 'ƒê√† N·∫µng',
        salaryMin: 18000000,
        salaryMax: 30000000,
        currency: 'VND',
        isActive: true,
        viewCount: Math.floor(Math.random() * 500) + 100,
        publishedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 ng√†y tr∆∞·ªõc
      },
      {
        title: 'Data Engineer',
        description: 'Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm Data Engineer c√≥ kinh nghi·ªám x√¢y d·ª±ng v√† duy tr√¨ h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn.',
        requirements: ['C√≥ √≠t nh·∫•t 3 nƒÉm kinh nghi·ªám v·ªõi Big Data', 'Th√†nh th·∫°o Spark, Hadoop, Kafka', 'Kinh nghi·ªám v·ªõi AWS/GCP/Azure'],
        benefits: ['L∆∞∆°ng c·∫°nh tranh', 'Ch·∫ø ƒë·ªô l√†m vi·ªác linh ho·∫°t', 'C∆° h·ªôi ph√°t tri·ªÉn chuy√™n m√¥n'],
        responsibilities: ['X√¢y d·ª±ng pipeline x·ª≠ l√Ω d·ªØ li·ªáu', 'T·ªëi ∆∞u h√≥a h·ªá th·ªëng', 'L√†m vi·ªác v·ªõi data scientists'],
        jobType: 'FULL_TIME',
        workMode: 'REMOTE',
        experienceLevel: 'SENIOR',
        location: 'Remote',
        salaryMin: 35000000,
        salaryMax: 60000000,
        currency: 'VND',
        isActive: true,
        viewCount: Math.floor(Math.random() * 500) + 100,
        publishedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000) // 10 ng√†y tr∆∞·ªõc
      },
      {
        title: 'Mobile Developer (Flutter)',
        description: 'T√¨m ki·∫øm Mobile Developer c√≥ kinh nghi·ªám v·ªõi Flutter ƒë·ªÉ ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông ƒëa n·ªÅn t·∫£ng.',
        requirements: ['C√≥ √≠t nh·∫•t 2 nƒÉm kinh nghi·ªám v·ªõi Flutter', 'Hi·ªÉu bi·∫øt v·ªÅ Dart', 'Kinh nghi·ªám ph√°t tri·ªÉn ·ª©ng d·ª•ng iOS/Android'],
        benefits: ['M√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông', 'C∆° h·ªôi l√†m vi·ªác v·ªõi c√¥ng ngh·ªá m·ªõi', 'Ch·∫ø ƒë·ªô ph√∫c l·ª£i t·ªët'],
        responsibilities: ['Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông ƒëa n·ªÅn t·∫£ng', 'T·ªëi ∆∞u hi·ªáu su·∫•t ·ª©ng d·ª•ng', 'L√†m vi·ªác v·ªõi backend developers'],
        jobType: 'FULL_TIME',
        workMode: 'HYBRID',
        experienceLevel: 'INTERMEDIATE',
        location: 'H√† N·ªôi',
        salaryMin: 22000000,
        salaryMax: 38000000,
        currency: 'VND',
        isActive: true,
        viewCount: Math.floor(Math.random() * 500) + 100,
        publishedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 ng√†y tr∆∞·ªõc
      },
      {
        title: 'DevOps Engineer',
        description: 'T√¨m ki·∫øm DevOps Engineer c√≥ kinh nghi·ªám x√¢y d·ª±ng v√† duy tr√¨ h·ªá th·ªëng CI/CD, qu·∫£n l√Ω h·∫° t·∫ßng cloud.',
        requirements: ['C√≥ √≠t nh·∫•t 3 nƒÉm kinh nghi·ªám v·ªõi DevOps', 'Th√†nh th·∫°o Docker, Kubernetes, Jenkins', 'Kinh nghi·ªám v·ªõi AWS/GCP/Azure'],
        benefits: ['L∆∞∆°ng c·∫°nh tranh', 'Ch·∫ø ƒë·ªô l√†m vi·ªác linh ho·∫°t', 'C∆° h·ªôi ph√°t tri·ªÉn chuy√™n m√¥n'],
        responsibilities: ['X√¢y d·ª±ng v√† duy tr√¨ h·ªá th·ªëng CI/CD', 'Qu·∫£n l√Ω h·∫° t·∫ßng cloud', 'T·ªëi ∆∞u h√≥a quy tr√¨nh ph√°t tri·ªÉn'],
        jobType: 'FULL_TIME',
        workMode: 'HYBRID',
        experienceLevel: 'SENIOR',
        location: 'H·ªì Ch√≠ Minh',
        salaryMin: 30000000,
        salaryMax: 55000000,
        currency: 'VND',
        isActive: true,
        viewCount: Math.floor(Math.random() * 500) + 100,
        publishedAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000) // 8 ng√†y tr∆∞·ªõc
      }
    ];

    // X√≥a c√°c job hi·ªán c√≥ c·ªßa c√¥ng ty
    await prisma.job.deleteMany({
      where: { companyId }
    });
    console.log('üóëÔ∏è ƒê√£ x√≥a c√°c job c≈© c·ªßa c√¥ng ty');

    // T·∫°o c√°c job m·ªõi
    const jobs = [];
    for (const jobData of jobsData) {
      const job = await prisma.job.create({
        data: {
          ...jobData,
          companyId
        }
      });
      jobs.push(job);
      console.log(`‚úÖ ƒê√£ t·∫°o job: ${job.title}`);
    }

    // 3. T·∫°o c√°c sinh vi√™n v√† ·ª©ng vi√™n
    const studentsData = [
      {
        email: 'nguyen.van.a@student.vnu.edu.vn',
        firstName: 'Nguy·ªÖn VƒÉn',
        lastName: 'A',
        university: 'ƒê·∫°i h·ªçc Qu·ªëc gia H√† N·ªôi',
        major: 'Khoa h·ªçc m√°y t√≠nh',
        skills: ['JavaScript', 'React', 'TypeScript']
      },
      {
        email: 'tran.thi.b@student.vnu.edu.vn',
        firstName: 'Tr·∫ßn Th·ªã',
        lastName: 'B',
        university: 'ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi',
        major: 'K·ªπ thu·∫≠t ph·∫ßn m·ªÅm',
        skills: ['Node.js', 'MongoDB', 'Express']
      },
      {
        email: 'le.van.c@student.vnu.edu.vn',
        firstName: 'L√™ VƒÉn',
        lastName: 'C',
        university: 'ƒê·∫°i h·ªçc C√¥ng ngh·ªá - ƒêHQGHN',
        major: 'Khoa h·ªçc d·ªØ li·ªáu',
        skills: ['Python', 'Vue.js', 'Django']
      },
      {
        email: 'pham.thi.d@student.vnu.edu.vn',
        firstName: 'Ph·∫°m Th·ªã',
        lastName: 'D',
        university: 'ƒê·∫°i h·ªçc FPT',
        major: 'Thi·∫øt k·∫ø ƒë·ªì h·ªça',
        skills: ['Figma', 'Adobe XD', 'UI/UX Design']
      }
    ];

    // T·∫°o c√°c sinh vi√™n
    const students = [];
    for (const studentData of studentsData) {
      // Ki·ªÉm tra xem sinh vi√™n ƒë√£ t·ªìn t·∫°i ch∆∞a
      let student = await prisma.user.findUnique({
        where: { email: studentData.email },
        include: { studentProfile: true }
      });

      if (!student) {
        student = await prisma.user.create({
          data: {
            email: studentData.email,
            password: '$2b$10$dMrTWrx.nP5MkOUxu/IoB.4Y5RenDlX9EJzMH1zMdgOzKlmTFg7Tq', // password: password123
            role: 'STUDENT',
            isActive: true,
            isVerified: true,
            studentProfile: {
              create: {
                firstName: studentData.firstName,
                lastName: studentData.lastName,
                university: studentData.university,
                major: studentData.major,
                skills: studentData.skills,
                graduationYear: 2024
              }
            }
          },
          include: { studentProfile: true }
        });
        console.log(`‚úÖ ƒê√£ t·∫°o sinh vi√™n: ${student.email}`);
      } else {
        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y sinh vi√™n: ${student.email}`);
      }
      
      students.push(student);
    }

    // 4. T·∫°o c√°c ƒë∆°n ·ª©ng tuy·ªÉn
    // X√≥a c√°c ƒë∆°n ·ª©ng tuy·ªÉn c≈©
    await prisma.application.deleteMany({
      where: {
        job: {
          companyId
        }
      }
    });
    console.log('üóëÔ∏è ƒê√£ x√≥a c√°c ƒë∆°n ·ª©ng tuy·ªÉn c≈©');

    // T·∫°o c√°c ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi
    const applicationStatuses = ['PENDING', 'REVIEWING', 'SHORTLISTED', 'INTERVIEW_SCHEDULED'];
    
    for (const job of jobs) {
      // Ch·ªçn ng·∫´u nhi√™n 1-3 sinh vi√™n ƒë·ªÉ ·ª©ng tuy·ªÉn v√†o m·ªói c√¥ng vi·ªác
      const applicantCount = Math.floor(Math.random() * 3) + 1;
      const applicants = students.sort(() => 0.5 - Math.random()).slice(0, applicantCount);
      
      for (const student of applicants) {
        const status = applicationStatuses[Math.floor(Math.random() * applicationStatuses.length)];
        const daysAgo = Math.floor(Math.random() * 7) + 1;
        const appliedAt = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);
        
        const application = await prisma.application.create({
          data: {
            jobId: job.id,
            studentId: student.id,
            status,
            appliedAt,
            coverLetter: `T√¥i l√† ${student.studentProfile.firstName} ${student.studentProfile.lastName}, sinh vi√™n ng√†nh ${student.studentProfile.major} t·∫°i ${student.studentProfile.university}. T√¥i r·∫•t quan t√¢m ƒë·∫øn v·ªã tr√≠ ${job.title} t·∫°i c√¥ng ty c·ªßa b·∫°n v√† mong mu·ªën ƒë∆∞·ª£c ƒë√≥ng g√≥p v√†o s·ª± ph√°t tri·ªÉn c·ªßa c√¥ng ty.`,
            updatedAt: new Date()
          }
        });
        
        console.log(`‚úÖ ƒê√£ t·∫°o ƒë∆°n ·ª©ng tuy·ªÉn: ${student.email} -> ${job.title} (${status})`);
      }
    }

    // 5. C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ·ª©ng vi√™n cho m·ªói job
    for (const job of jobs) {
      const applicationCount = await prisma.application.count({
        where: { jobId: job.id }
      });
      
      await prisma.job.update({
        where: { id: job.id },
        data: { applicationsCount: applicationCount }
      });
      
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ·ª©ng vi√™n cho job ${job.title}: ${applicationCount}`);
    }

    console.log('üéâ ƒê√£ ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u cho c√¥ng ty!');
    console.log('\nüìä Th·ªëng k√™:');
    console.log(`- S·ªë l∆∞·ª£ng job: ${jobs.length}`);
    console.log(`- S·ªë l∆∞·ª£ng sinh vi√™n: ${students.length}`);
    
    const totalApplications = await prisma.application.count({
      where: {
        job: {
          companyId
        }
      }
    });
    console.log(`- T·ªïng s·ªë ƒë∆°n ·ª©ng tuy·ªÉn: ${totalApplications}`);
    
    console.log('\nüß™ S·ª≠ d·ª•ng token sau ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c√¥ng ty:');
    console.log(`localStorage.setItem("token", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IiR7Y29tcGFueVVzZXIuaWR9IiwiZW1haWwiOiIke2NvbXBhbnlVc2VyLmVtYWlsfSIsInJvbGUiOiJDT01QQU5ZIiwiaWF0IjoxNzUzMTY3NzMxLCJleHAiOjE3NTMyNTQxMzF9.9r8aVeUT-JZx6F4AgSQEgwKT6kQ5elzhhERmMYGNjAs");`);
    
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedCompanyData(); 