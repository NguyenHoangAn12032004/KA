// Recruitment Platform - Optimized Database Schema 
// Compliant with 3NF/BCNF standards
// Enhanced with triggers, procedures, and performance optimizations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== CORE ENTITIES ====================

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  role             UserRole
  isActive         Boolean           @default(true)
  isVerified       Boolean           @default(false)
  lastLogin        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  applications     Application[]
  companyProfile   CompanyProfile?
  studentProfile   StudentProfile?
  messages         Message[]
  notifications    Notification[]
  refreshTokens    RefreshToken[]
  savedJobs        SavedJob[]
  activityLogs     ActivityLog[]
  companyFollows   CompanyFollower[] @relation("UserFollows")
  jobViews         JobView[]

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([isActive])
}

model StudentProfile {
  id                 String                 @id @default(uuid())
  userId             String                 @unique
  firstName          String
  lastName           String
  phone              String?
  dateOfBirth        DateTime?
  avatar             String?
  university         String?
  major              String?
  graduationYear     Int?
  gpa                Float?
  experience         String?
  portfolio          String?
  github             String?
  linkedin           String?
  resume             String?
  expectedSalaryMin  Int?
  expectedSalaryMax  Int?
  profileCompletion  Int                    @default(0)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  
  // Relations - Normalized
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills             StudentSkill[]
  educations         StudentEducation[]
  experiences        StudentExperience[]
  projects           StudentProject[]
  certifications     StudentCertification[]
  languages          StudentLanguage[]
  jobPreferences     StudentJobPreference[]

  @@map("student_profiles")
  @@index([userId])
  @@index([university])
  @@index([major])
}

// ==================== NORMALIZED SKILL SYSTEM ====================

model Skill {
  id              String           @id @default(uuid())
  name            String           @unique
  category        String?
  description     String?
  createdAt       DateTime         @default(now())
  
  // Relations
  studentSkills   StudentSkill[]
  jobSkills       JobSkill[]

  @@map("skills")
  @@index([name])
  @@index([category])
}

model StudentSkill {
  id          String         @id @default(uuid())
  studentId   String
  skillId     String
  level       SkillLevel     @default(BEGINNER)
  yearsOfExp  Int?
  createdAt   DateTime       @default(now())
  
  student     StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  skill       Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([studentId, skillId])
  @@map("student_skills")
  @@index([studentId])
  @@index([skillId])
}

model StudentJobPreference {
  id           String         @id @default(uuid())
  studentId    String
  jobType      JobType?
  workMode     WorkMode?
  location     String?
  priority     Int            @default(1)
  createdAt    DateTime       @default(now())
  
  student      StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_job_preferences")
  @@index([studentId])
}

// ==================== COMPANY SYSTEM ====================

model CompanyProfile {
  id              String       @id @default(uuid())
  userId          String       @unique
  companyName     String
  industry        String?
  companySize     CompanySize?
  website         String?
  logo            String?
  description     String?
  contactPerson   String?
  phone           String?
  email           String?
  address         String?
  city            String?
  country         String       @default("Vietnam")
  founded         String?
  isVerified      Boolean      @default(false)
  isFeatured      Boolean      @default(false)
  verificationDoc String?
  rating          Float?       @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs            Job[]
  interviews      Interview[]
  socialLinks     CompanySocialLink[]
  followers       CompanyFollower[]
  stats           CompanyStats?

  @@map("company_profiles")
  @@index([userId])
  @@index([companyName])
  @@index([industry])
  @@index([city])
  @@index([isVerified])
}

model CompanySocialLink {
  id        String         @id @default(uuid())
  companyId String
  platform  SocialPlatform
  url       String
  createdAt DateTime       @default(now())
  
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, platform])
  @@map("company_social_links")
  @@index([companyId])
}

model CompanyFollower {
  id         String         @id @default(uuid())
  companyId  String
  userId     String
  followedAt DateTime       @default(now())
  
  company    CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user       User           @relation("UserFollows", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([companyId, userId])
  @@map("company_followers")
  @@index([companyId])
  @@index([userId])
}

// ==================== JOB SYSTEM ====================

model Job {
  id                  String           @id @default(uuid())
  companyId           String
  title               String
  description         String
  jobType             JobType
  workMode            WorkMode
  experienceLevel     ExperienceLevel
  location            String
  salaryMin           Int?
  salaryMax           Int?
  currency            String           @default("VND")
  applicationDeadline DateTime?
  maxApplications     Int?
  department          String?
  reportingTo         String?
  isActive            Boolean          @default(true)
  isFeatured          Boolean          @default(false)
  publishedAt         DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  // Relations - Normalized
  company             CompanyProfile   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications        Application[]
  interviews          Interview[]
  savedJobs           SavedJob[]
  jobSkills           JobSkill[]
  jobBenefits         JobBenefit[]
  jobRequirements     JobRequirement[]
  jobResponsibilities JobResponsibility[]
  jobViews            JobView[]
  jobTags             JobTag[]
  stats               JobStats?

  @@map("jobs")
  @@index([companyId])
  @@index([jobType])
  @@index([workMode])
  @@index([location])
  @@index([isActive])
  @@index([publishedAt])
}

model JobSkill {
  id         String     @id @default(uuid())
  jobId      String
  skillId    String
  required   Boolean    @default(true)
  level      SkillLevel @default(INTERMEDIATE)
  createdAt  DateTime   @default(now())
  
  job        Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill      Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([jobId, skillId])
  @@map("job_skills")
  @@index([jobId])
  @@index([skillId])
}

model JobBenefit {
  id          String   @id @default(uuid())
  jobId       String
  benefit     String
  description String?
  priority    Int      @default(1)
  createdAt   DateTime @default(now())
  
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_benefits")
  @@index([jobId])
}

model JobRequirement {
  id          String   @id @default(uuid())
  jobId       String
  requirement String
  required    Boolean  @default(true)
  priority    Int      @default(1)
  createdAt   DateTime @default(now())
  
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_requirements")
  @@index([jobId])
}

model JobResponsibility {
  id             String   @id @default(uuid())
  jobId          String
  responsibility String
  priority       Int      @default(1)
  createdAt      DateTime @default(now())
  
  job            Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_responsibilities")
  @@index([jobId])
}

model JobTag {
  id        String   @id @default(uuid())
  jobId     String
  tagName   String
  createdAt DateTime @default(now())
  
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_tags")
  @@index([jobId])
  @@index([tagName])
}

// ==================== APPLICATION SYSTEM ====================

model Application {
  id           String            @id @default(uuid())
  jobId        String
  studentId    String
  coverLetter  String?
  customResume String?
  status       ApplicationStatus @default(PENDING)
  hrNotes      String?
  feedback     String?
  rating       Int?
  appliedAt    DateTime          @default(now())
  reviewedAt   DateTime?
  respondedAt  DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  // Relations
  job                Job                        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  student            User                       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  interviews         Interview[]
  statusHistory      ApplicationStatusHistory[]

  @@unique([jobId, studentId])
  @@map("applications")
  @@index([jobId])
  @@index([studentId])
  @@index([status])
  @@index([appliedAt])
}

model ApplicationStatusHistory {
  id            String            @id @default(uuid())
  applicationId String
  fromStatus    ApplicationStatus?
  toStatus      ApplicationStatus
  notes         String?
  changedBy     String?
  changedAt     DateTime          @default(now())
  
  application   Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_status_history")
  @@index([applicationId])
  @@index([changedAt])
}

// ==================== INTERVIEW SYSTEM ====================

model Interview {
  id               String            @id @default(uuid())
  applicationId    String
  title            String
  description      String?
  type             InterviewType
  scheduledAt      DateTime
  duration         Int               @default(60)
  location         String?
  meetingLink      String?
  interviewer      String?
  interviewerEmail String?
  status           InterviewStatus   @default(SCHEDULED)
  notes            String?
  rating           Int?
  feedback         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations - Optimized (no redundant companyId, jobId)
  application      Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  // Computed relations via application
  company          CompanyProfile    @relation(fields: [companyId], references: [id])
  job              Job               @relation(fields: [jobId], references: [id])
  
  // Virtual fields for easier queries
  companyId        String            // Computed via trigger
  jobId            String            // Computed via trigger

  @@map("interviews")
  @@index([applicationId])
  @@index([scheduledAt])
  @@index([status])
}

// ==================== STATISTICS & ANALYTICS ====================

// Materialized views for performance
model CompanyStats {
  companyId       String         @id
  totalJobs       Int            @default(0)
  activeJobs      Int            @default(0)
  totalViews      Int            @default(0)
  totalFollowers  Int            @default(0)
  avgRating       Float?
  lastJobPosted   DateTime?
  lastUpdated     DateTime       @default(now())
  
  company         CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_stats")
}

model JobStats {
  jobId              String   @id
  totalApplications  Int      @default(0)
  totalViews         Int      @default(0)
  avgApplicationTime Float?   // Hours to apply after posting
  lastViewed         DateTime?
  lastApplied        DateTime?
  lastUpdated        DateTime @default(now())
  
  job                Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_stats")
}

model JobView {
  id        String   @id @default(uuid())
  jobId     String
  userId    String?
  ipAddress String?
  userAgent String?
  referrer  String?
  viewedAt  DateTime @default(now())
  
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("job_views")
  @@index([jobId])
  @@index([userId])
  @@index([viewedAt])
  @@index([ipAddress])
}

// ==================== SUPPORT TABLES ====================

model SavedJob {
  id      String   @id @default(uuid())
  userId  String
  jobId   String
  savedAt DateTime @default(now())
  
  job     Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("saved_jobs")
  @@index([userId])
  @@index([jobId])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model Message {
  id          String    @id @default(uuid())
  senderId    String
  receiverId  String?
  roomId      String?
  content     String
  messageType String    @default("text")
  fileUrl     String?
  isRead      Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@index([senderId])
  @@index([receiverId])
  @@index([roomId])
  @@index([createdAt])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId])
  @@index([expiresAt])
}

model ActivityLog {
  id           String   @id @default(uuid())
  userId       String
  activityType String
  entityType   String
  entityId     String
  data         Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
  @@index([userId])
  @@index([activityType])
  @@index([entityType])
  @@index([createdAt])
}

model SystemSetting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
  @@index([key])
}

// ==================== STUDENT EXTENDED PROFILES ====================

model StudentEducation {
  id             String         @id @default(uuid())
  studentId      String
  institution    String
  degree         String
  fieldOfStudy   String
  startDate      DateTime
  endDate        DateTime?
  current        Boolean        @default(false)
  gpa            Float?
  achievements   String[]       @default([])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  student        StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_educations")
  @@index([studentId])
}

model StudentExperience {
  id             String         @id @default(uuid())
  studentId      String
  company        String
  position       String
  startDate      DateTime
  endDate        DateTime?
  current        Boolean        @default(false)
  description    String
  achievements   String[]       @default([])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  student        StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_experiences")
  @@index([studentId])
}

model StudentProject {
  id             String         @id @default(uuid())
  studentId      String
  title          String
  description    String
  technologies   String[]       @default([])
  startDate      DateTime
  endDate        DateTime?
  current        Boolean        @default(false)
  githubUrl      String?
  liveUrl        String?
  imageUrl       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  student        StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_projects")
  @@index([studentId])
}

model StudentLanguage {
  id             String              @id @default(uuid())
  studentId      String
  name           String
  proficiency    LanguageProficiency
  certification  String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  
  student        StudentProfile      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_languages")
  @@index([studentId])
}

model StudentCertification {
  id             String         @id @default(uuid())
  studentId      String
  name           String
  issuer         String
  issueDate      DateTime
  expiryDate     DateTime?
  credentialId   String?
  credentialUrl  String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  student        StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_certifications")
  @@index([studentId])
}

// ==================== ENUMS ====================

enum UserRole {
  ADMIN
  STUDENT
  COMPANY
  HR_MANAGER
  UNIVERSITY
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEW_SCHEDULED
  INTERVIEWED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum JobType {
  INTERNSHIP
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  FREELANCE
}

enum WorkMode {
  ONSITE
  REMOTE
  HYBRID
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  INTERMEDIATE
  SENIOR
  EXPERT
  EXECUTIVE
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CompanySize {
  STARTUP     // 1-10
  SMALL       // 11-50
  MEDIUM      // 51-200
  LARGE       // 201-1000
  ENTERPRISE  // 1000+
}

enum SocialPlatform {
  LINKEDIN
  FACEBOOK
  TWITTER
  INSTAGRAM
  WEBSITE
  GITHUB
}

enum InterviewType {
  PHONE
  VIDEO
  ONSITE
  TECHNICAL
  BEHAVIORAL
  PANEL
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum NotificationType {
  APPLICATION_SUBMITTED
  APPLICATION_STATUS_CHANGED
  NEW_JOB_POSTED
  INTERVIEW_SCHEDULED
  MESSAGE_RECEIVED
  SYSTEM_ANNOUNCEMENT
  COMPANY_FOLLOWED
  JOB_REMINDER
}

enum LanguageProficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
} 