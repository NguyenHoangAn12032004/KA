generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  role             UserRole
  isActive         Boolean           @default(true)
  isVerified       Boolean           @default(false)
  lastLogin        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  applications     Application[]
  company_profiles company_profiles?
  messages         messages[]
  notifications    Notification[]
  refresh_tokens   refresh_tokens[]
  savedJobs        SavedJob[]
  studentProfile   StudentProfile?

  @@map("users")
}

model StudentProfile {
  id                 String                 @id @default(uuid())
  userId             String                 @unique
  firstName          String
  lastName           String
  phone              String?
  dateOfBirth        DateTime?
  avatar             String?
  university         String?
  major              String?
  graduationYear     Int?
  gpa                Float?
  skills             String[]               @default([])
  experience         String?
  portfolio          String?
  github             String?
  linkedin           String?
  resume             String?
  preferredJobTypes  JobType[]              @default([])
  preferredWorkModes WorkMode[]             @default([])
  preferredLocations String[]               @default([])
  expectedSalaryMin  Int?
  expectedSalaryMax  Int?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  certifications     StudentCertification[]
  educations         StudentEducation[]
  workExperiences    StudentExperience[]
  languages          StudentLanguage[]
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects           StudentProject[]

  @@map("student_profiles")
}

model Job {
  id                  String           @id @default(uuid())
  companyId           String
  title               String
  description         String
  requirements        String[]         @default([])
  benefits            String[]         @default([])
  responsibilities    String[]         @default([])
  jobType             JobType
  workMode            WorkMode
  experienceLevel     ExperienceLevel
  location            String
  salaryMin           Int?
  salaryMax           Int?
  currency            String           @default("VND")
  applicationDeadline DateTime?
  maxApplications     Int?
  requiredSkills      String[]         @default([])
  preferredSkills     String[]         @default([])
  tags                String[]         @default([])
  isActive            Boolean          @default(true)
  isFeatured          Boolean          @default(false)
  viewCount           Int              @default(0)
  publishedAt         DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  applicationsCount   Int              @default(0)
  department          String?
  qualifications      String[]         @default([])
  reportingTo         String?
  applications        Application[]
  interviews          interviews[]
  company_profiles    company_profiles @relation(fields: [companyId], references: [id], onDelete: Cascade)
  savedJobs           SavedJob[]

  @@map("jobs")
}

model Application {
  id            String            @id @default(uuid())
  jobId         String
  studentId     String
  coverLetter   String?
  customResume  String?
  status        ApplicationStatus @default(PENDING)
  statusHistory Json              @default("[]")
  hrNotes       String?
  feedback      String?
  rating        Int?
  appliedAt     DateTime          @default(now())
  reviewedAt    DateTime?
  respondedAt   DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  job           Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  student       User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  interviews    interviews[]

  @@unique([jobId, studentId])
  @@map("applications")
}

model SavedJob {
  id      String   @id @default(uuid())
  userId  String
  jobId   String
  savedAt DateTime @default(now())
  job     Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("saved_jobs")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemSetting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model analytics {
  id        String   @id
  metric    String
  value     Int
  date      DateTime @db.Date
  userId    String?
  jobId     String?
  companyId String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@unique([metric, date, userId, jobId, companyId])
}

model company_profiles {
  id              String       @id
  userId          String       @unique
  companyName     String
  companySize     String?
  industry        String?
  website         String?
  logo            String?
  description     String?
  contactPerson   String?
  phone           String?
  address         String?
  city            String?
  country         String       @default("Vietnam")
  linkedin        String?
  facebook        String?
  twitter         String?
  isVerified      Boolean      @default(false)
  verificationDoc String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  email           String?
  founded         String?
  rating          Float?
  users           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews      interviews[]
  jobs            Job[]
}

model interviews {
  id               String           @id
  applicationId    String
  companyId        String
  jobId            String
  title            String
  description      String?
  type             String
  scheduledAt      DateTime
  duration         Int              @default(60)
  location         String?
  meetingLink      String?
  interviewer      String?
  interviewerEmail String?
  status           String           @default("SCHEDULED")
  notes            String?
  rating           Int?
  feedback         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  applications     Application      @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  company_profiles company_profiles @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobs             Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model messages {
  id          String    @id
  senderId    String
  receiverId  String?
  roomId      String?
  content     String
  messageType String    @default("text")
  fileUrl     String?
  isRead      Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  users       User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model refresh_tokens {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentEducation {
  id             String         @id @default(uuid())
  studentId      String
  institution    String
  degree         String
  fieldOfStudy   String
  startDate      DateTime
  endDate        DateTime?
  current        Boolean        @default(false)
  gpa            Float?
  achievements   String[]       @default([])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  studentProfile StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_educations")
}

model StudentExperience {
  id             String         @id @default(uuid())
  studentId      String
  company        String
  position       String
  startDate      DateTime
  endDate        DateTime?
  current        Boolean        @default(false)
  description    String
  skills         String[]       @default([])
  achievements   String[]       @default([])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  studentProfile StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_experiences")
}

model StudentProject {
  id             String         @id @default(uuid())
  studentId      String
  title          String
  description    String
  technologies   String[]       @default([])
  startDate      DateTime
  endDate        DateTime?
  current        Boolean        @default(false)
  githubUrl      String?
  liveUrl        String?
  imageUrl       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  studentProfile StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_projects")
}

model StudentLanguage {
  id             String              @id @default(uuid())
  studentId      String
  name           String
  proficiency    LanguageProficiency
  certification  String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  studentProfile StudentProfile      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_languages")
}

model StudentCertification {
  id             String         @id @default(uuid())
  studentId      String
  name           String
  issuer         String
  issueDate      DateTime
  expiryDate     DateTime?
  credentialId   String?
  credentialUrl  String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  studentProfile StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_certifications")
}

enum UserRole {
  ADMIN
  STUDENT
  COMPANY
  HR_MANAGER
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEW_SCHEDULED
  INTERVIEWED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum JobType {
  INTERNSHIP
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}

enum WorkMode {
  ONSITE
  REMOTE
  HYBRID
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  INTERMEDIATE
  SENIOR
  EXPERT
}

enum NotificationType {
  APPLICATION_SUBMITTED
  APPLICATION_STATUS_CHANGED
  NEW_JOB_POSTED
  INTERVIEW_SCHEDULED
  MESSAGE_RECEIVED
  SYSTEM_ANNOUNCEMENT
}

enum LanguageProficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
}
