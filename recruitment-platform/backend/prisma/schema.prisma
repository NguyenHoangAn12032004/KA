generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity_logs {
  id           String   @id
  userId       String
  activityType String
  entityType   String
  entityId     String
  data         Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model analytics {
  id        String   @id
  metric    String
  value     Int
  date      DateTime @db.Date
  userId    String?
  jobId     String?
  companyId String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@unique([metric, date, userId, jobId, companyId])
}

model applications {
  id            String            @id
  jobId         String
  studentId     String
  coverLetter   String?
  customResume  String?
  status        ApplicationStatus @default(PENDING)
  statusHistory Json              @default("[]")
  hrNotes       String?
  feedback      String?
  rating        Int?
  appliedAt     DateTime          @default(now())
  reviewedAt    DateTime?
  respondedAt   DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime
  jobs          jobs              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  users         users             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  interviews    interviews[]

  @@unique([jobId, studentId])
}

model company_profiles {
  id              String       @id
  userId          String       @unique
  companyName     String
  companySize     String?
  industry        String?
  website         String?
  logo            String?
  description     String?
  contactPerson   String?
  phone           String?
  address         String?
  city            String?
  country         String       @default("Vietnam")
  linkedin        String?
  facebook        String?
  twitter         String?
  isVerified      Boolean      @default(false)
  verificationDoc String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  email           String?
  founded         String?
  rating          Float?
  view_count      Int?         @default(0)
  follower_count  Int?         @default(0)
  users           users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews      interviews[]
  jobs            jobs[]
}

model interviews {
  id               String           @id
  applicationId    String
  companyId        String
  jobId            String
  title            String
  description      String?
  type             String
  scheduledAt      DateTime
  duration         Int              @default(60)
  location         String?
  meetingLink      String?
  interviewer      String?
  interviewerEmail String?
  status           String           @default("SCHEDULED")
  notes            String?
  rating           Int?
  feedback         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  applications     applications     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  company_profiles company_profiles @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobs             jobs             @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model job_views {
  id        String   @id
  jobId     String
  userId    String?
  ipAddress String?
  userAgent String?
  viewedAt  DateTime @default(now())
  jobs      jobs     @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model jobs {
  id                  String           @id
  companyId           String
  title               String
  description         String
  requirements        String[]         @default([])
  benefits            String[]         @default([])
  responsibilities    String[]         @default([])
  jobType             JobType
  workMode            WorkMode
  experienceLevel     ExperienceLevel
  location            String
  salaryMin           Int?
  salaryMax           Int?
  currency            String           @default("VND")
  applicationDeadline DateTime?
  maxApplications     Int?
  requiredSkills      String[]         @default([])
  preferredSkills     String[]         @default([])
  tags                String[]         @default([])
  isActive            Boolean          @default(true)
  isFeatured          Boolean          @default(false)
  viewCount           Int              @default(0)
  publishedAt         DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime
  applicationsCount   Int              @default(0)
  department          String?
  qualifications      String[]         @default([])
  reportingTo         String?
  applications        applications[]
  interviews          interviews[]
  job_views           job_views[]
  company_profiles    company_profiles @relation(fields: [companyId], references: [id], onDelete: Cascade)
  saved_jobs          saved_jobs[]
}

model messages {
  id          String    @id
  senderId    String
  receiverId  String?
  roomId      String?
  content     String
  messageType String    @default("text")
  fileUrl     String?
  isRead      Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  users       users     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model notifications {
  id        String           @id
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  users     users            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refresh_tokens {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model saved_jobs {
  id      String   @id
  userId  String
  jobId   String
  savedAt DateTime @default(now())
  jobs    jobs     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  users   users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

model student_certifications {
  id               String           @id
  studentId        String
  name             String
  issuer           String
  issueDate        DateTime
  expiryDate       DateTime?
  credentialId     String?
  credentialUrl    String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  student_profiles student_profiles @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model student_educations {
  id               String           @id
  studentId        String
  institution      String
  degree           String
  fieldOfStudy     String
  startDate        DateTime
  endDate          DateTime?
  current          Boolean          @default(false)
  gpa              Float?
  achievements     String[]         @default([])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  student_profiles student_profiles @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model student_experiences {
  id               String           @id
  studentId        String
  company          String
  position         String
  startDate        DateTime
  endDate          DateTime?
  current          Boolean          @default(false)
  description      String
  skills           String[]         @default([])
  achievements     String[]         @default([])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  student_profiles student_profiles @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model student_languages {
  id               String              @id
  studentId        String
  name             String
  proficiency      LanguageProficiency
  certification    String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime
  student_profiles student_profiles    @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model student_profiles {
  id                     String                   @id
  userId                 String                   @unique
  firstName              String
  lastName               String
  phone                  String?
  dateOfBirth            DateTime?
  avatar                 String?
  university             String?
  major                  String?
  graduationYear         Int?
  gpa                    Float?
  skills                 String[]                 @default([])
  experience             String?
  portfolio              String?
  github                 String?
  linkedin               String?
  resume                 String?
  preferredJobTypes      JobType[]                @default([])
  preferredWorkModes     WorkMode[]               @default([])
  preferredLocations     String[]                 @default([])
  expectedSalaryMin      Int?
  expectedSalaryMax      Int?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  profile_completion     Int?                     @default(0)
  student_certifications student_certifications[]
  student_educations     student_educations[]
  student_experiences    student_experiences[]
  student_languages      student_languages[]
  users                  users                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  student_projects       student_projects[]
}

model student_projects {
  id               String           @id
  studentId        String
  title            String
  description      String
  technologies     String[]         @default([])
  startDate        DateTime
  endDate          DateTime?
  current          Boolean          @default(false)
  githubUrl        String?
  liveUrl          String?
  imageUrl         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  student_profiles student_profiles @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model system_settings {
  id        String   @id
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model users {
  id               String            @id
  email            String            @unique
  password         String
  role             UserRole
  isActive         Boolean           @default(true)
  isVerified       Boolean           @default(false)
  lastLogin        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  activity_logs    activity_logs[]
  applications     applications[]
  company_profiles company_profiles?
  messages         messages[]
  notifications    notifications[]
  refresh_tokens   refresh_tokens[]
  saved_jobs       saved_jobs[]
  student_profiles student_profiles?
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEW_SCHEDULED
  INTERVIEWED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  INTERMEDIATE
  SENIOR
  EXPERT
}

enum JobType {
  INTERNSHIP
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}

enum LanguageProficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
}

enum NotificationType {
  APPLICATION_SUBMITTED
  APPLICATION_STATUS_CHANGED
  NEW_JOB_POSTED
  INTERVIEW_SCHEDULED
  MESSAGE_RECEIVED
  SYSTEM_ANNOUNCEMENT
}

enum UserRole {
  ADMIN
  STUDENT
  COMPANY
  HR_MANAGER
}

enum WorkMode {
  ONSITE
  REMOTE
  HYBRID
}
