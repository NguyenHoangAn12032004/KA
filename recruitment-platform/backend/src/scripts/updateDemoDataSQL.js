const { Pool } = require('pg');
require('dotenv').config();

// Database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

async function updateDemoData() {
  const userId = '37e48e5a-6a94-4765-a6cd-384482f2ce34';
  
  try {
    console.log('üöÄ Starting comprehensive demo data update...');
    
    // Check if user exists
    const userResult = await pool.query('SELECT id, email FROM users WHERE id = $1', [userId]);
    if (userResult.rows.length === 0) {
      console.error('‚ùå User not found!');
      return;
    }
    
    console.log('‚úÖ User found:', userResult.rows[0].email);
    
    // Update/Insert student profile
    const profileData = {
      userId: userId,
      firstName: 'Nguy·ªÖn Ho√†ng',
      lastName: 'An',
      phone: '+84 123 456 789',
      dateOfBirth: '2004-03-12',
      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',
      university: 'Tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi',
      major: 'Khoa h·ªçc M√°y t√≠nh',
      graduationYear: 2026,
      gpa: 3.75,
      skills: ['JavaScript', 'TypeScript', 'React', 'Node.js', 'Python', 'PostgreSQL', 'MongoDB', 'Docker', 'AWS', 'Git', 'Machine Learning', 'Data Analysis', 'RESTful APIs', 'GraphQL'],
      experience: 'C√≥ 2 nƒÉm kinh nghi·ªám th·ª±c t·∫≠p v√† l√†m vi·ªác part-time trong lƒ©nh v·ª±c ph√°t tri·ªÉn web v√† ph√¢n t√≠ch d·ªØ li·ªáu',
      portfolio: 'https://nguyenhoanganportfolio.vercel.app',
      github: 'https://github.com/NguyenHoangAn12032004',
      linkedin: 'https://linkedin.com/in/nguyen-hoang-an-dev',
      resume: 'https://drive.google.com/file/d/resume-nguyen-hoang-an.pdf',
      preferredJobTypes: ['INTERNSHIP', 'FULL_TIME', 'PART_TIME'],
      preferredWorkModes: ['HYBRID', 'REMOTE'],
      preferredLocations: ['H√† N·ªôi', 'TP. H·ªì Ch√≠ Minh', 'ƒê√† N·∫µng', 'Remote'],
      expectedSalaryMin: 8000000,
      expectedSalaryMax: 15000000
    };

    // Upsert student profile
    const profileQuery = `
      INSERT INTO student_profiles (
        id, "userId", "firstName", "lastName", phone, "dateOfBirth", avatar,
        university, major, "graduationYear", gpa, skills, experience,
        portfolio, github, linkedin, resume, "preferredJobTypes",
        "preferredWorkModes", "preferredLocations", "expectedSalaryMin", "expectedSalaryMax",
        "createdAt", "updatedAt"
      ) VALUES (
        gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, NOW(), NOW()
      ) ON CONFLICT ("userId") DO UPDATE SET
        "firstName" = EXCLUDED."firstName",
        "lastName" = EXCLUDED."lastName",
        phone = EXCLUDED.phone,
        "dateOfBirth" = EXCLUDED."dateOfBirth",
        avatar = EXCLUDED.avatar,
        university = EXCLUDED.university,
        major = EXCLUDED.major,
        "graduationYear" = EXCLUDED."graduationYear",
        gpa = EXCLUDED.gpa,
        skills = EXCLUDED.skills,
        experience = EXCLUDED.experience,
        portfolio = EXCLUDED.portfolio,
        github = EXCLUDED.github,
        linkedin = EXCLUDED.linkedin,
        resume = EXCLUDED.resume,
        "preferredJobTypes" = EXCLUDED."preferredJobTypes",
        "preferredWorkModes" = EXCLUDED."preferredWorkModes",
        "preferredLocations" = EXCLUDED."preferredLocations",
        "expectedSalaryMin" = EXCLUDED."expectedSalaryMin",
        "expectedSalaryMax" = EXCLUDED."expectedSalaryMax",
        "updatedAt" = NOW()
      RETURNING id
    `;

    const profileResult = await pool.query(profileQuery, [
      profileData.userId, profileData.firstName, profileData.lastName, profileData.phone,
      profileData.dateOfBirth, profileData.avatar, profileData.university, profileData.major,
      profileData.graduationYear, profileData.gpa, profileData.skills, profileData.experience,
      profileData.portfolio, profileData.github, profileData.linkedin, profileData.resume,
      profileData.preferredJobTypes, profileData.preferredWorkModes, profileData.preferredLocations,
      profileData.expectedSalaryMin, profileData.expectedSalaryMax
    ]);

    const studentProfileId = profileResult.rows[0].id;
    console.log('‚úÖ Student profile updated:', studentProfileId);

    // Clear existing related data
    await pool.query('DELETE FROM student_educations WHERE "studentId" = $1', [studentProfileId]);
    await pool.query('DELETE FROM student_experiences WHERE "studentId" = $1', [studentProfileId]);
    await pool.query('DELETE FROM student_projects WHERE "studentId" = $1', [studentProfileId]);
    await pool.query('DELETE FROM student_languages WHERE "studentId" = $1', [studentProfileId]);
    await pool.query('DELETE FROM student_certifications WHERE "studentId" = $1', [studentProfileId]);
    console.log('‚úÖ Cleared existing related data');

    // Add Education records
    const educations = [
      {
        studentId: studentProfileId,
        institution: 'Tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi',
        degree: 'C·ª≠ nh√¢n',
        fieldOfStudy: 'Khoa h·ªçc M√°y t√≠nh',
        startDate: '2022-09-01',
        endDate: '2026-06-30',
        current: true,
        gpa: 3.75,
        achievements: [
          'H·ªçc b·ªïng xu·∫•t s·∫Øc 2023-2024',
          'Gi·∫£i nh·∫•t cu·ªôc thi l·∫≠p tr√¨nh ACM-ICPC c·∫•p tr∆∞·ªùng',
          'Top 10% sinh vi√™n xu·∫•t s·∫Øc khoa CNTT',
          'Ho√†n th√†nh 15 d·ª± √°n th·ª±c t·∫ø'
        ]
      },
      {
        studentId: studentProfileId,
        institution: 'Tr∆∞·ªùng THPT Chu VƒÉn An',
        degree: 'T·ªët nghi·ªáp THPT',
        fieldOfStudy: 'Chuy√™n Tin h·ªçc',
        startDate: '2019-09-01',
        endDate: '2022-06-30',
        current: false,
        gpa: 9.2,
        achievements: [
          'H·ªçc sinh xu·∫•t s·∫Øc 3 nƒÉm li√™n ti·∫øp',
          'Gi·∫£i nh√¨ Olympic Tin h·ªçc c·∫•p th√†nh ph·ªë',
          'Gi·∫£i ba cu·ªôc thi Khoa h·ªçc K·ªπ thu·∫≠t c·∫•p qu·ªëc gia'
        ]
      }
    ];

    for (const education of educations) {
      await pool.query(`
        INSERT INTO student_educations (
          id, "studentId", institution, degree, "fieldOfStudy", "startDate", "endDate",
          current, gpa, achievements, "createdAt", "updatedAt"
        ) VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW())
      `, [
        education.studentId, education.institution, education.degree, education.fieldOfStudy,
        education.startDate, education.endDate, education.current, education.gpa, education.achievements
      ]);
    }
    console.log(`‚úÖ Created ${educations.length} education records`);

    // Add Work Experience records
    const experiences = [
      {
        studentId: studentProfileId,
        company: 'FPT Software',
        position: 'Frontend Developer Intern',
        startDate: '2024-06-01',
        endDate: '2024-08-31',
        current: false,
        description: 'Ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng cho ·ª©ng d·ª•ng web e-commerce s·ª≠ d·ª•ng React.js v√† TypeScript. T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t ·ª©ng d·ª•ng v√† c·∫£i thi·ªán tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.',
        skills: ['React.js', 'TypeScript', 'Material-UI', 'Redux', 'REST APIs'],
        achievements: [
          'Gi·∫£m 30% th·ªùi gian t·∫£i trang th√¥ng qua t·ªëi ∆∞u h√≥a code',
          'Ph√°t tri·ªÉn 5 component t√°i s·ª≠ d·ª•ng ƒë∆∞·ª£c s·ª≠ d·ª•ng to√†n d·ª± √°n',
          'Nh·∫≠n ƒë√°nh gi√° xu·∫•t s·∫Øc t·ª´ mentor v√† team lead'
        ]
      },
      {
        studentId: studentProfileId,
        company: 'VNG Corporation',
        position: 'Data Analysis Intern',
        startDate: '2024-01-15',
        endDate: '2024-04-30',
        current: false,
        description: 'Ph√¢n t√≠ch d·ªØ li·ªáu ng∆∞·ªùi d√πng game Zalo, x√¢y d·ª±ng dashboard b√°o c√°o v√† m√¥ h√¨nh d·ª± ƒëo√°n h√†nh vi ng∆∞·ªùi ch∆°i s·ª≠ d·ª•ng Python v√† SQL.',
        skills: ['Python', 'SQL', 'Pandas', 'Matplotlib', 'Power BI', 'Machine Learning'],
        achievements: [
          'X√¢y d·ª±ng dashboard theo d√µi 50+ KPIs quan tr·ªçng',
          'Ph√°t tri·ªÉn m√¥ h√¨nh d·ª± ƒëo√°n churn v·ªõi ƒë·ªô ch√≠nh x√°c 85%',
          'Ti·∫øt ki·ªám 20 gi·ªù/tu·∫ßn cho team th√¥ng qua t·ª± ƒë·ªông h√≥a b√°o c√°o'
        ]
      },
      {
        studentId: studentProfileId,
        company: 'CodeGym',
        position: 'Teaching Assistant',
        startDate: '2023-09-01',
        endDate: null,
        current: true,
        description: 'H·ªó tr·ª£ gi·∫£ng d·∫°y c√°c kh√≥a h·ªçc l·∫≠p tr√¨nh web cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu. Ch·∫•m b√†i t·∫≠p, h∆∞·ªõng d·∫´n h·ªçc vi√™n v√† ph√°t tri·ªÉn t√†i li·ªáu h·ªçc t·∫≠p.',
        skills: ['HTML/CSS', 'JavaScript', 'Git', 'Teaching', 'Technical Writing'],
        achievements: [
          'H·ªó tr·ª£ h∆°n 200 h·ªçc vi√™n ho√†n th√†nh kh√≥a h·ªçc',
          'Ph√°t tri·ªÉn 10+ b√†i t·∫≠p th·ª±c h√†nh ƒë∆∞·ª£c s·ª≠ d·ª•ng ch√≠nh th·ª©c',
          'ƒê·∫°t rating 4.9/5 t·ª´ h·ªçc vi√™n'
        ]
      }
    ];

    for (const experience of experiences) {
      await pool.query(`
        INSERT INTO student_experiences (
          id, "studentId", company, position, "startDate", "endDate", current,
          description, skills, achievements, "createdAt", "updatedAt"
        ) VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW())
      `, [
        experience.studentId, experience.company, experience.position, experience.startDate,
        experience.endDate, experience.current, experience.description, experience.skills, experience.achievements
      ]);
    }
    console.log(`‚úÖ Created ${experiences.length} experience records`);

    // Add Project records
    const projects = [
      {
        studentId: studentProfileId,
        title: 'E-Learning Platform',
        description: 'N·ªÅn t·∫£ng h·ªçc tr·ª±c tuy·∫øn to√†n di·ªán v·ªõi t√≠nh nƒÉng live streaming, qu·∫£n l√Ω kh√≥a h·ªçc, thanh to√°n v√† theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p. H·ªó tr·ª£ h∆°n 1000 h·ªçc vi√™n ƒë·ªìng th·ªùi.',
        technologies: ['React.js', 'Node.js', 'PostgreSQL', 'Socket.io', 'AWS S3', 'Stripe API'],
        startDate: '2024-03-01',
        endDate: '2024-06-30',
        current: false,
        githubUrl: 'https://github.com/NguyenHoangAn12032004/elearning-platform',
        liveUrl: 'https://elearning-platform-demo.vercel.app',
        imageUrl: 'https://images.unsplash.com/photo-1501504905252-473c47e087f8?w=400&h=300&fit=crop'
      },
      {
        studentId: studentProfileId,
        title: 'AI Chatbot cho Customer Service',
        description: 'Chatbot th√¥ng minh s·ª≠ d·ª•ng NLP v√† Machine Learning ƒë·ªÉ t·ª± ƒë·ªông tr·∫£ l·ªùi c√¢u h·ªèi kh√°ch h√†ng. T√≠ch h·ª£p v·ªõi CRM v√† c√≥ kh·∫£ nƒÉng h·ªçc h·ªèi t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i.',
        technologies: ['Python', 'TensorFlow', 'NLTK', 'FastAPI', 'Redis', 'Docker'],
        startDate: '2024-01-01',
        endDate: '2024-02-28',
        current: false,
        githubUrl: 'https://github.com/NguyenHoangAn12032004/ai-chatbot',
        liveUrl: 'https://ai-chatbot-demo.herokuapp.com',
        imageUrl: 'https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=400&h=300&fit=crop'
      },
      {
        studentId: studentProfileId,
        title: 'Mobile Task Management App',
        description: '·ª®ng d·ª•ng qu·∫£n l√Ω c√¥ng vi·ªác cho mobile v·ªõi ƒë·ªìng b·ªô real-time, th√¥ng b√°o push, v√† t√≠ch h·ª£p calendar. H·ªó tr·ª£ l√†m vi·ªác nh√≥m v√† theo d√µi ti·∫øn ƒë·ªô d·ª± √°n.',
        technologies: ['React Native', 'Firebase', 'Redux', 'Push Notifications', 'Google Calendar API'],
        startDate: '2023-11-01',
        endDate: '2023-12-31',
        current: false,
        githubUrl: 'https://github.com/NguyenHoangAn12032004/task-manager-mobile',
        liveUrl: null,
        imageUrl: 'https://images.unsplash.com/photo-1512314889357-e157c22f938d?w=400&h=300&fit=crop'
      },
      {
        studentId: studentProfileId,
        title: 'Recruitment Platform',
        description: 'N·ªÅn t·∫£ng tuy·ªÉn d·ª•ng to√†n di·ªán hi·ªán t·∫°i ƒëang ph√°t tri·ªÉn. K·∫øt n·ªëi sinh vi√™n v√† nh√† tuy·ªÉn d·ª•ng v·ªõi c√°c t√≠nh nƒÉng t√¨m ki·∫øm th√¥ng minh, qu·∫£n l√Ω h·ªì s∆° v√† quy tr√¨nh ph·ªèng v·∫•n.',
        technologies: ['React.js', 'TypeScript', 'Node.js', 'PostgreSQL', 'Prisma', 'Material-UI'],
        startDate: '2024-11-01',
        endDate: null,
        current: true,
        githubUrl: 'https://github.com/NguyenHoangAn12032004/recruitment-platform',
        liveUrl: 'http://localhost:3000',
        imageUrl: 'https://images.unsplash.com/photo-1521737711867-e3b97375f902?w=400&h=300&fit=crop'
      }
    ];

    for (const project of projects) {
      await pool.query(`
        INSERT INTO student_projects (
          id, "studentId", title, description, technologies, "startDate", "endDate",
          current, "githubUrl", "liveUrl", "imageUrl", "createdAt", "updatedAt"
        ) VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW(), NOW())
      `, [
        project.studentId, project.title, project.description, project.technologies,
        project.startDate, project.endDate, project.current, project.githubUrl,
        project.liveUrl, project.imageUrl
      ]);
    }
    console.log(`‚úÖ Created ${projects.length} project records`);

    // Add Language records
    const languages = [
      { studentId: studentProfileId, name: 'Ti·∫øng Vi·ªát', proficiency: 'NATIVE', certification: null },
      { studentId: studentProfileId, name: 'Ti·∫øng Anh', proficiency: 'ADVANCED', certification: 'IELTS 7.5' },
      { studentId: studentProfileId, name: 'Ti·∫øng Nh·∫≠t', proficiency: 'INTERMEDIATE', certification: 'JLPT N3' },
      { studentId: studentProfileId, name: 'Ti·∫øng Trung', proficiency: 'BEGINNER', certification: 'HSK Level 2' }
    ];

    for (const language of languages) {
      await pool.query(`
        INSERT INTO student_languages (
          id, "studentId", name, proficiency, certification, "createdAt", "updatedAt"
        ) VALUES (gen_random_uuid(), $1, $2, $3, $4, NOW(), NOW())
      `, [language.studentId, language.name, language.proficiency, language.certification]);
    }
    console.log(`‚úÖ Created ${languages.length} language records`);

    // Add Certification records
    const certifications = [
      {
        studentId: studentProfileId,
        name: 'AWS Certified Cloud Practitioner',
        issuer: 'Amazon Web Services',
        issueDate: '2024-05-15',
        expiryDate: '2027-05-15',
        credentialId: 'AWS-CCP-2024-051234',
        credentialUrl: 'https://aws.amazon.com/verification/credentials'
      },
      {
        studentId: studentProfileId,
        name: 'Google Data Analytics Professional Certificate',
        issuer: 'Google',
        issueDate: '2024-03-20',
        expiryDate: null,
        credentialId: 'GDAPC-2024-032034',
        credentialUrl: 'https://coursera.org/verify/professional-cert/gdapc2024'
      },
      {
        studentId: studentProfileId,
        name: 'MongoDB Certified Developer',
        issuer: 'MongoDB University',
        issueDate: '2024-01-10',
        expiryDate: '2026-01-10',
        credentialId: 'MDB-DEV-2024-011045',
        credentialUrl: 'https://university.mongodb.com/certification/verify'
      },
      {
        studentId: studentProfileId,
        name: 'React Developer Certification',
        issuer: 'Meta',
        issueDate: '2023-12-05',
        expiryDate: null,
        credentialId: 'META-REACT-2023-120512',
        credentialUrl: 'https://developers.facebook.com/certification/verify'
      },
      {
        studentId: studentProfileId,
        name: 'Python for Data Science',
        issuer: 'IBM',
        issueDate: '2023-10-18',
        expiryDate: null,
        credentialId: 'IBM-PDS-2023-101856',
        credentialUrl: 'https://ibm.com/certification/verify'
      }
    ];

    for (const certification of certifications) {
      await pool.query(`
        INSERT INTO student_certifications (
          id, "studentId", name, issuer, "issueDate", "expiryDate",
          "credentialId", "credentialUrl", "createdAt", "updatedAt"
        ) VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
      `, [
        certification.studentId, certification.name, certification.issuer,
        certification.issueDate, certification.expiryDate, certification.credentialId, certification.credentialUrl
      ]);
    }
    console.log(`‚úÖ Created ${certifications.length} certification records`);

    console.log('\nüéâ DEMO DATA UPDATE COMPLETED SUCCESSFULLY! üéâ');
    console.log('\nüìä DATA SUMMARY:');
    console.log(`üë§ Profile: ${profileData.firstName} ${profileData.lastName}`);
    console.log(`üéì Education: ${educations.length} records`);
    console.log(`üíº Experience: ${experiences.length} records`);
    console.log(`üöÄ Projects: ${projects.length} records`);
    console.log(`üåê Languages: ${languages.length} records`);
    console.log(`üèÜ Certifications: ${certifications.length} records`);
    console.log('\n‚ú® All data has been successfully populated for user:', userId);

  } catch (error) {
    console.error('‚ùå Error updating demo data:', error);
  } finally {
    await pool.end();
  }
}

updateDemoData();
