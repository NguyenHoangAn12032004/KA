const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function updateExistingNotifications() {
  try {
    console.log('üîÑ Updating existing interview notifications with detailed data...');
    
    // Get all INTERVIEW_SCHEDULED notifications
    const notifications = await prisma.notifications.findMany({
      where: { 
        type: 'INTERVIEW_SCHEDULED'
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log(`Found ${notifications.length} interview notifications to update`);
    
    for (let i = 0; i < notifications.length; i++) {
      const notif = notifications[i];
      const currentData = notif.data || {};
      
      // Sample detailed data for each notification
      const detailedData = {
        ...currentData,
        location: i % 2 === 0 
          ? 'T·∫ßng 15, To√† nh√† Vincom Center, 72 L√™ Th√°nh T√¥n, Qu·∫≠n 1, TP.HCM'
          : 'VƒÉn ph√≤ng StartupXYZ, 123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM',
        interviewLink: i % 2 === 0 
          ? 'https://meet.google.com/abc-defg-hij'
          : null,
        interviewerName: i % 2 === 0 
          ? 'Nguy·ªÖn VƒÉn An'
          : 'Tr·∫ßn Th·ªã B√≠ch',
        interviewerEmail: i % 2 === 0 
          ? 'nguyen.van.an@techcorp.vn'
          : 'tran.thi.bich@startupxyz.com',
        interviewerPhone: i % 2 === 0 
          ? '+84 901 234 567'
          : '+84 987 654 321',
        meetingId: i % 2 === 0 
          ? 'MEET-001-2025'
          : null,
        interviewType: i % 2 === 0 ? 'online' : 'offline',
        notes: i % 2 === 0 
          ? 'Vui l√≤ng chu·∫©n b·ªã laptop v√† ki·ªÉm tra k·∫øt n·ªëi internet tr∆∞·ªõc 15 ph√∫t. Ph·ªèng v·∫•n s·∫Ω bao g·ªìm: 1) Gi·ªõi thi·ªáu b·∫£n th√¢n (10 ph√∫t), 2) Th·∫£o lu·∫≠n kinh nghi·ªám k·ªπ thu·∫≠t (30 ph√∫t), 3) Live coding exercise (20 ph√∫t), 4) Q&A (10 ph√∫t).'
          : 'Vui l√≤ng mang theo CV in, ch·ª©ng minh th∆∞ v√† ƒë·∫øn s·ªõm 10 ph√∫t. ƒê·ªãa ƒëi·ªÉm: Ph√≤ng h·ªçp A, t·∫ßng 3. Ph·ªèng v·∫•n s·∫Ω k√©o d√†i kho·∫£ng 45-60 ph√∫t.',
        companyName: i % 2 === 0 ? 'TechCorp Vietnam' : 'StartupXYZ'
      };
      
      await prisma.notifications.update({
        where: { id: notif.id },
        data: { data: detailedData }
      });
      
      console.log(`‚úÖ Updated notification ${i + 1}: ${notif.id}`);
    }
    
    console.log('\nüìã Updated notifications:');
    const updatedNotifications = await prisma.notifications.findMany({
      where: { 
        type: 'INTERVIEW_SCHEDULED'
      },
      orderBy: { createdAt: 'desc' }
    });
    
    updatedNotifications.forEach((notif, index) => {
      console.log(`\n${index + 1}. ${notif.title}`);
      console.log(`   ID: ${notif.id}`);
      const data = notif.data || {};
      console.log(`   - Job: ${data.jobTitle || 'N/A'}`);
      console.log(`   - Company: ${data.companyName || 'N/A'}`);
      console.log(`   - Type: ${data.interviewType || 'N/A'}`);
      console.log(`   - Location: ${data.location || 'N/A'}`);
      console.log(`   - Link: ${data.interviewLink || 'N/A'}`);
      console.log(`   - Interviewer: ${data.interviewerName || 'N/A'}`);
      console.log(`   - Email: ${data.interviewerEmail || 'N/A'}`);
      console.log(`   - Phone: ${data.interviewerPhone || 'N/A'}`);
      console.log(`   - Meeting ID: ${data.meetingId || 'N/A'}`);
      console.log(`   - Notes: ${data.notes ? data.notes.substring(0, 80) + '...' : 'N/A'}`);
    });
    
    console.log('\nüéâ All notifications updated successfully!');
    console.log('\nüí° Now test the frontend:');
    console.log('1. Refresh the notifications page');
    console.log('2. Click on an interview notification');
    console.log('3. Check if all detailed information is displayed');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

updateExistingNotifications();
