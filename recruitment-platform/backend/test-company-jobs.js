const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const jwt = require('jsonwebtoken');

async function testCompanyJobs() {
  try {
    console.log('üîç Ki·ªÉm tra API getCompanyJobs...');
    
    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
    const currentUser = await prisma.user.findFirst({
      where: { email: 'company@example.com' },
      include: { company_profiles: true }
    });
    
    if (!currentUser || !currentUser.company_profiles) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¥ng ty c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i');
      return;
    }
    
    console.log('üë§ Th√¥ng tin ng∆∞·ªùi d√πng:');
    console.log(`- ID: ${currentUser.id}`);
    console.log(`- Email: ${currentUser.email}`);
    console.log(`- Role: ${currentUser.role}`);
    console.log(`- Company ID: ${currentUser.company_profiles.id}`);
    console.log(`- Company Name: ${currentUser.company_profiles.companyName}`);
    
    // T·∫°o JWT token
    const token = jwt.sign(
      { id: currentUser.id, email: currentUser.email, role: currentUser.role },
      'your-secret-key',
      { expiresIn: '1h' }
    );
    
    console.log('\nüîë JWT Token ƒë·ªÉ test API:');
    console.log(token);
    console.log('\nüìã S·ª≠ d·ª•ng l·ªánh sau ƒë·ªÉ ƒë·∫∑t token v√†o localStorage:');
    console.log(`localStorage.setItem('token', '${token}');`);
    
    // M√¥ ph·ªèng API getCompanyJobs
    console.log('\nüîÑ M√¥ ph·ªèng API getCompanyJobs...');
    
    const companyId = currentUser.company_profiles.id;
    
    // L·∫•y t·∫•t c·∫£ c√¥ng vi·ªác c·ªßa c√¥ng ty n√†y
    const jobs = await prisma.job.findMany({
      where: { companyId },
      include: {
        company_profiles: {
          select: {
            companyName: true,
            logo: true
          }
        },
        _count: {
          select: {
            applications: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log(`üìä T√¨m th·∫•y ${jobs.length} c√¥ng vi·ªác cho c√¥ng ty ID: ${companyId}`);
    
    if (jobs.length > 0) {
      console.log('\nüìã Danh s√°ch c√¥ng vi·ªác:');
      jobs.forEach((job, index) => {
        console.log(`\n[${index + 1}] ${job.title}`);
        console.log(`- ID: ${job.id}`);
        console.log(`- ƒê·ªãa ƒëi·ªÉm: ${job.location}`);
        console.log(`- Lo·∫°i: ${job.jobType}`);
        console.log(`- S·ªë l∆∞·ª£ng ·ª©ng vi√™n: ${job._count.applications}`);
        console.log(`- Ng√†y t·∫°o: ${job.createdAt}`);
      });
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác n√†o cho c√¥ng ty n√†y');
    }
    
    // Ki·ªÉm tra t·∫•t c·∫£ c√°c c√¥ng vi·ªác trong database
    const allJobs = await prisma.job.findMany({
      orderBy: { createdAt: 'desc' }
    });
    
    console.log(`\nüìä T·ªïng s·ªë c√¥ng vi·ªác trong database: ${allJobs.length}`);
    
    // Ki·ªÉm tra c√°c companyId kh√°c nhau
    const companyIds = [...new Set(allJobs.map(job => job.companyId))];
    console.log(`üìä S·ªë l∆∞·ª£ng companyId kh√°c nhau: ${companyIds.length}`);
    console.log('üìã Danh s√°ch companyId:');
    companyIds.forEach(id => {
      const count = allJobs.filter(job => job.companyId === id).length;
      console.log(`- ${id}: ${count} c√¥ng vi·ªác`);
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra API:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testCompanyJobs(); 